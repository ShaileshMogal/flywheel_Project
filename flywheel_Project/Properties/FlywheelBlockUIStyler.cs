//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  S:\Feesworth\NX Open\Block UI Styler Folder\FlywheelBlockUIStyler.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: Mahesh Mogal
//              Version: NX 12
//              Date: 10-15-2023  (Format: mm-dd-yyyy)
//              Time: 18:53 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using IO = System.IO;
using NXOpen;
using NXOpen.UF;
using NXOpen.Markup;
using NXOpen.Features;
using NXOpen.GeometricUtilities;
using System.Security.Cryptography;
using static NXOpen.CAE.Post;
using NXOpen.Assemblies;
using NXOpen.Positioning;
using NXOpen.Annotations;
using NXOpen.Drawings;
using NXOpen.CAM;
using NXOpen.PartFamily;
using NXOpen.BlockStyler;

//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class FlywheelBlockUIStyler
{
    //class members
    private static Session theSession = null;
    private static UI theUI = null;
    private string theDlxFileName;
    private NXOpen.BlockStyler.BlockDialog theDialog;
    private NXOpen.BlockStyler.Group group0;// Block type: Group
    private NXOpen.BlockStyler.SpecifyPoint point_xyz;// Block type: Specify Point
    private NXOpen.BlockStyler.DoubleBlock doubleDiameter;// Block type: Double
    
    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public FlywheelBlockUIStyler()
    {
        try
        {
            theSession = Session.GetSession();
            theUI = UI.GetUI();
            theDlxFileName = @"S:\Feesworth\NX Open\Block UI Styler Folder\Flywheel Block UI Styler.dlx";
            theDialog = theUI.CreateDialog(theDlxFileName);
            theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
            theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            throw ex;
        }
    }
    //------------------------------- DIALOG LAUNCHING ---------------------------------
    //
    //    Before invoking this application one needs to open any part/empty part in NX
    //    because of the behavior of the blocks.
    //
    //    Make sure the dlx file is in one of the following locations:
    //        1.) From where NX session is launched
    //        2.) $UGII_USER_DIR/application
    //        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //            recommended. This variable is set to a full directory path to a file 
    //            containing a list of root directories for all custom applications.
    //            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
    //
    //    You can create the dialog using one of the following way:
    //
    //    1. Journal Replay
    //
    //        1) Replay this file through Tool->Journal->Play Menu.
    //
    //    2. USER EXIT
    //
    //        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    //        2) Invoke the Shared Library through File->Execute->NX Open menu.
    //
    //------------------------------------------------------------------------------
    public static void Main()
    {
        FlywheelBlockUIStyler theFlywheelBlockUIStyler = null;
        try
        {
            theFlywheelBlockUIStyler = new FlywheelBlockUIStyler();
            // The following method shows the dialog immediately
            theFlywheelBlockUIStyler.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            if(theFlywheelBlockUIStyler != null)
                theFlywheelBlockUIStyler.Dispose();
                theFlywheelBlockUIStyler = null;
        }
    }
    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
     public static int GetUnloadOption(string arg)
    {
        //return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
         return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    }
    
    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static void UnloadLibrary(string arg)
    {
        try
        {
            //---- Enter your code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogResponse Show()
    {
        try
        {
            theDialog.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if(theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }
    
    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {
        try
        {
            group0 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group0");
            point_xyz = (NXOpen.BlockStyler.SpecifyPoint)theDialog.TopBlock.FindBlock("point_xyz");
            doubleDiameter = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("doubleDiameter");
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    public void dialogShown_cb()
    {
        try
        {
            doubleDiameter.Value = 00;
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    public int apply_cb()
    {
        int errorCode = 0;
        try
        {
            ModelofFlywheel(doubleDiameter.Value, point_xyz);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    public int update_cb( NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if(block == point_xyz)
            {
            //---------Enter your code here-----------
            }
            else if(block == doubleDiameter)
            {
            //---------Enter your code here-----------
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
            errorCode = apply_cb();
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Function Name: GetBlockProperties
    //Returns the propertylist of the specified BlockID
    //------------------------------------------------------------------------------
    public PropertyList GetBlockProperties(string blockID)
    {
        PropertyList plist =null;
        try
        {
            plist = theDialog.GetBlockProperties(blockID);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return plist;
    }
    public static void ModelofFlywheel(double diameter,SpecifyPoint xyz)
    {
        Session theSession = Session.GetSession();
        //FileNew createFile = theSession.Parts.FileNew();
        //createFile.Units = Part.Units.Millimeters;
        //createFile.TemplateFileName = "model-plain-1-mm-template.prt";
        //createFile.NewFileName = @"S:\Feesworth\Project\flywheel.prt";
        //createFile.Commit();
        Part workPart = theSession.Parts.Work;

        double x = xyz.Point.X, y = xyz.Point.Y, z = xyz.Point.Z;
        double dim = diameter*1.33333333;

        Point3d p1 = ACS2WCS(new Point3d(x + dim * 0.375, y, z));
        Point3d p2 = ACS2WCS(new Point3d(x + dim * 0.625, y, z));
        Point3d p3 = ACS2WCS(new Point3d(x + dim * 0.75, y + dim * 0.625, z));
        Point3d p4 = ACS2WCS(new Point3d(x + dim * 1.75, y + dim * 0.625, z));
        Point3d p5 = ACS2WCS(new Point3d(x + dim * 1.875, y + dim * 0.25, z));
        Point3d p6 = ACS2WCS(new Point3d(x + dim * 2, y + dim * 0.25, z));
        Point3d p7 = ACS2WCS(new Point3d(x + dim * 2, y + dim * 1.25, z));
        Point3d p8 = ACS2WCS(new Point3d(x + dim * 1.875, y + dim * 1.25, z));
        Point3d p9 = ACS2WCS(new Point3d(x + dim * 1.75, y + dim * 0.875, z));
        Point3d p10 = ACS2WCS(new Point3d(x + dim * 0.75, y + dim * 0.875, z));
        Point3d p11 = ACS2WCS(new Point3d(x + dim * 0.625, y + dim * 1.5, z));
        Point3d p12 = ACS2WCS(new Point3d(x + dim * 0.375, y + dim * 1.5, z));
        Line l1 = workPart.Curves.CreateLine(p1, p2);
        Line l2 = workPart.Curves.CreateLine(p2, p3);
        Line l3 = workPart.Curves.CreateLine(p3, p4);
        Line l4 = workPart.Curves.CreateLine(p4, p5);
        Line l5 = workPart.Curves.CreateLine(p5, p6);
        Line l6 = workPart.Curves.CreateLine(p6, p7);
        Line l7 = workPart.Curves.CreateLine(p7, p8);
        Line l8 = workPart.Curves.CreateLine(p8, p9);
        Line l9 = workPart.Curves.CreateLine(p9, p10);
        Line l10 = workPart.Curves.CreateLine(p10, p11);
        Line l11 = workPart.Curves.CreateLine(p11, p12);
        Line l12 = workPart.Curves.CreateLine(p12, p1);

        Sketch sk = null;
        SketchInPlaceBuilder sketchInPlaceBuilder = workPart.Sketches.CreateNewSketchInPlaceBuilder(sk);
        sk = (Sketch)sketchInPlaceBuilder.Commit();
        sketchInPlaceBuilder.Destroy();
        sk.Activate(Sketch.ViewReorient.False);
        sk.AddGeometry(l1);
        sk.AddGeometry(l2);
        sk.AddGeometry(l3);
        sk.AddGeometry(l4);
        sk.AddGeometry(l5);
        sk.AddGeometry(l6);
        sk.AddGeometry(l7);
        sk.AddGeometry(l8);
        sk.AddGeometry(l9);
        sk.AddGeometry(l10);
        sk.AddGeometry(l11);
        sk.AddGeometry(l12);

        Sketch.ConstraintGeometry con1 = new Sketch.ConstraintGeometry();
        con1.Geometry = l1;
        Sketch.ConstraintGeometry con2 = new Sketch.ConstraintGeometry();
        con2.Geometry = l2;
        Sketch.ConstraintGeometry con3 = new Sketch.ConstraintGeometry();
        con3.Geometry = l3;
        Sketch.ConstraintGeometry con4 = new Sketch.ConstraintGeometry();
        con4.Geometry = l4;
        Sketch.ConstraintGeometry con5 = new Sketch.ConstraintGeometry();
        con5.Geometry = l5;
        Sketch.ConstraintGeometry con6 = new Sketch.ConstraintGeometry();
        con6.Geometry = l6;
        Sketch.ConstraintGeometry con7 = new Sketch.ConstraintGeometry();
        con7.Geometry = l7;
        Sketch.ConstraintGeometry con8 = new Sketch.ConstraintGeometry();
        con8.Geometry = l8;
        Sketch.ConstraintGeometry con9 = new Sketch.ConstraintGeometry();
        con9.Geometry = l9;
        Sketch.ConstraintGeometry con10 = new Sketch.ConstraintGeometry();
        con10.Geometry = l10;
        Sketch.ConstraintGeometry con11 = new Sketch.ConstraintGeometry();
        con11.Geometry = l11;
        Sketch.ConstraintGeometry con12 = new Sketch.ConstraintGeometry();
        con12.Geometry = l12;
        sk.CreateHorizontalConstraint(con1);
        sk.CreateHorizontalConstraint(con3);
        sk.CreateHorizontalConstraint(con5);
        sk.CreateHorizontalConstraint(con7);
        sk.CreateHorizontalConstraint(con9);
        sk.CreateHorizontalConstraint(con11);
        sk.CreateVerticalConstraint(con12);
        sk.CreateVerticalConstraint(con6);
        sk.CreateEqualLengthConstraint(con1, con11);
        sk.CreateEqualLengthConstraint(con2, con10);
        sk.CreateEqualLengthConstraint(con3, con9);
        sk.CreateEqualLengthConstraint(con4, con8);
        sk.CreateEqualLengthConstraint(con7, con5);

        Sketch.DimensionGeometry dim12_s = new Sketch.DimensionGeometry();
        dim12_s.Geometry = l12;
        dim12_s.AssocType = Sketch.AssocType.StartPoint;
        Sketch.DimensionGeometry dim12_e = new Sketch.DimensionGeometry();
        dim12_e.Geometry = l12;
        dim12_e.AssocType = Sketch.AssocType.EndPoint;
        Sketch.DimensionGeometry dim6_s = new Sketch.DimensionGeometry();
        dim6_s.Geometry = l6;
        dim6_s.AssocType = Sketch.AssocType.StartPoint;
        Sketch.DimensionGeometry dim6_e = new Sketch.DimensionGeometry();
        dim6_e.Geometry = l6;
        dim6_e.AssocType = Sketch.AssocType.EndPoint;
        Sketch.DimensionGeometry dim3_s = new Sketch.DimensionGeometry();
        dim3_s.Geometry = l3;
        dim3_s.AssocType = Sketch.AssocType.StartPoint;
        Sketch.DimensionGeometry dim9_s = new Sketch.DimensionGeometry();
        dim9_s.Geometry = l9;
        dim9_s.AssocType = Sketch.AssocType.StartPoint;
        Sketch.DimensionGeometry dim1_e = new Sketch.DimensionGeometry();
        dim1_e.Geometry = l1;
        dim1_e.AssocType = Sketch.AssocType.EndPoint;
        Sketch.DimensionGeometry dim2_e = new Sketch.DimensionGeometry();
        dim2_e.Geometry = l2;
        dim2_e.AssocType = Sketch.AssocType.EndPoint;
        Sketch.DimensionGeometry dim3_e = new Sketch.DimensionGeometry();
        dim3_e.Geometry = l3;
        dim3_e.AssocType = Sketch.AssocType.EndPoint;
        Sketch.DimensionGeometry dim4_e = new Sketch.DimensionGeometry();
        dim4_e.Geometry = l4;
        dim4_e.AssocType = Sketch.AssocType.EndPoint;
        Sketch.DimensionGeometry dim5_e = new Sketch.DimensionGeometry();
        dim5_e.Geometry = l5;
        dim5_e.AssocType = Sketch.AssocType.EndPoint;
        Expression exp12 = workPart.Expressions.CreateSystemExpression($"{dim * 1.5}");
        Expression exp6 = workPart.Expressions.CreateSystemExpression($"{dim * 1.0}");
        Expression exp_12T3 = workPart.Expressions.CreateSystemExpression($"{dim * 0.626}");
        Expression exp_12T9 = workPart.Expressions.CreateSystemExpression($"{dim * 0.876}");
        Expression exp_12T_1 = workPart.Expressions.CreateSystemExpression($"{dim * 0.25}");
        Expression exp_12T_2 = workPart.Expressions.CreateSystemExpression($"{dim * 0.376}");
        Expression exp_12T_3 = workPart.Expressions.CreateSystemExpression($"{dim * 1.376}");
        Expression exp_12T_4 = workPart.Expressions.CreateSystemExpression($"{dim * 1.5}");
        Expression exp_12T_5 = workPart.Expressions.CreateSystemExpression($"{dim * 1.626}");
        sk.CreateDimension(Sketch.ConstraintType.VerticalDim, dim12_s, dim12_e, p12, exp12);
        sk.CreateDimension(Sketch.ConstraintType.VerticalDim, dim6_s, dim6_e, p6, exp6);
        sk.CreateDimension(Sketch.ConstraintType.VerticalDim, dim12_e, dim3_s, p12, exp_12T3);
        sk.CreateDimension(Sketch.ConstraintType.VerticalDim, dim12_e, dim9_s, p12, exp_12T9);
        sk.CreateDimension(Sketch.ConstraintType.HorizontalDim, dim12_e, dim1_e, p11, exp_12T_1);
        sk.CreateDimension(Sketch.ConstraintType.HorizontalDim, dim12_e, dim2_e, p11, exp_12T_2);
        sk.CreateDimension(Sketch.ConstraintType.HorizontalDim, dim12_e, dim3_e, p11, exp_12T_3);
        sk.CreateDimension(Sketch.ConstraintType.HorizontalDim, dim12_e, dim4_e, p11, exp_12T_4);
        sk.CreateDimension(Sketch.ConstraintType.HorizontalDim, dim12_e, dim5_e, p11, exp_12T_5);

        sk.Deactivate(Sketch.ViewReorient.True, Sketch.UpdateLevel.SketchOnly);

        ///---Revolve---///
        Revolve revole = null;
        RevolveBuilder revolveBuilder = workPart.Features.CreateRevolveBuilder(revole);

        SelectionIntentRule[] selectionIntentRule = new SelectionIntentRule[1];
        selectionIntentRule[0] = workPart.ScRuleFactory.CreateRuleCurveFeature(new Feature[] { sk.Feature });
        Section section = workPart.Sections.CreateSection();
        section.AddToSection(selectionIntentRule, l1, null, null, new Point3d(0, 0, 0), Section.Mode.Create);
        revolveBuilder.Section = section;

        Direction direction = workPart.Directions.CreateDirection(new Point3d(x, y, z), new Vector3d(0, 1, 0), SmartObject.UpdateOption.WithinModeling);
        Axis axis = workPart.Axes.CreateAxis(null, direction, SmartObject.UpdateOption.WithinModeling);
        revolveBuilder.Axis = axis;

        revolveBuilder.Limits.StartExtend.TrimType = Extend.ExtendType.Value;
        revolveBuilder.Limits.StartExtend.SetValue("0");
        revolveBuilder.Limits.EndExtend.TrimType = Extend.ExtendType.Value;
        revolveBuilder.Limits.EndExtend.SetValue("360");

        revole = (Revolve)revolveBuilder.Commit();
        revolveBuilder.Destroy();

        ///---Extrude---///
        Arc arc = workPart.Curves.CreateArc(new Point3d(x + dim * 1.25, y + dim * 0.625, z), new Vector3d(1, 0, 0), new Vector3d(0, 0, 1), dim * 0.25, 0, 360 * Math.PI / 180);
        Extrude eb = null;
        ExtrudeBuilder extrudeBuilder = workPart.Features.CreateExtrudeBuilder(eb);
        SelectionIntentRule[] selectionIntentRule1 = new SelectionIntentRule[1];
        selectionIntentRule1[0] = workPart.ScRuleFactory.CreateRuleCurveDumb(new Curve[] { arc });
        Section section1 = workPart.Sections.CreateSection();
        section1.AddToSection(selectionIntentRule1, arc, null, null, new Point3d(0, 0, 0), Section.Mode.Create);
        extrudeBuilder.Section = section1;

        Direction direction1 = workPart.Directions.CreateDirection(new Point3d(x + dim * 1.25, y + dim * 0.625, z), new Vector3d(0, 1, 0), SmartObject.UpdateOption.WithinModeling);
        extrudeBuilder.Direction = direction1;

        extrudeBuilder.Limits.StartExtend.TrimType = Extend.ExtendType.Value;
        extrudeBuilder.Limits.StartExtend.SetValue("0");
        extrudeBuilder.Limits.EndExtend.TrimType = Extend.ExtendType.ThroughAll;

        extrudeBuilder.BooleanOperation.Type = BooleanOperation.BooleanType.Subtract;
        //extrudeBuilder.BooleanOperation.SetTargetBodies(workPart.Bodies.ToArray());
        Body[] b = revole.GetBodies();
        extrudeBuilder.BooleanOperation.SetTargetBodies(b);

        eb = (Extrude)extrudeBuilder.Commit();
        extrudeBuilder.Destroy();

        ///---Pattern Feature---///
        Feature pf = null;
        PatternFeatureBuilder patternFeatureBuilder = workPart.Features.CreatePatternFeatureBuilder(pf);

        patternFeatureBuilder.FeatureList.Add(new Feature[] { eb });

        patternFeatureBuilder.PatternService.PatternType = PatternDefinition.PatternEnum.Circular;

        //DatumAxis datumAxis = (DatumAxis)workPart.Datums.FindObject("DATUM_CSYS(0) Y axis");
        //Direction direction3 = workPart.Directions.CreateDirection(datumAxis, Sense.Forward, SmartObject.UpdateOption.WithinModeling);
        //Axis axis1 = workPart.Axes.CreateAxis(null, direction3, SmartObject.UpdateOption.WithinModeling);
        //patternFeatureBuilder.PatternService.CircularDefinition.RotationAxis = axis1;
        ///////////////////////////OR////////////////////////////////////////////////////
        // Revolve revolve1 = (Revolve)workPart.Features.FindObject("REVOLVED(2)");
        Face face1 = (Face)revole.FindObject("FACE 7");
        Direction direction3 = workPart.Directions.CreateDirection(face1, Sense.Forward, SmartObject.UpdateOption.WithinModeling);
        Axis axis1 = workPart.Axes.CreateAxis(null, direction3, SmartObject.UpdateOption.WithinModeling);
        patternFeatureBuilder.PatternService.CircularDefinition.RotationAxis = axis1;


        patternFeatureBuilder.PatternService.CircularDefinition.AngularSpacing.NCopies.RightHandSide = "6";
        patternFeatureBuilder.PatternService.CircularDefinition.AngularSpacing.PitchAngle.RightHandSide = "60";

        patternFeatureBuilder.Commit();
        patternFeatureBuilder.Destroy();
    }
    public static Point3d ACS2WCS(Point3d input)
    {
        double[] pt_input = new double[3];
        pt_input[0] = input.X;
        pt_input[1] = input.Y;
        pt_input[2] = input.Z;

        double[] pt_output = new double[3];

        UFSession theUFSession = UFSession.GetUFSession();
        theUFSession.Csys.MapPoint(UFConstants.UF_CSYS_ROOT_WCS_COORDS, pt_input, UFConstants.UF_CSYS_WORK_COORDS, pt_output);
        Point3d output = new Point3d(pt_output[0], pt_output[1], pt_output[2]);
        return output;
    }
}
